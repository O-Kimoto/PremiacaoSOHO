# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import sys
import os
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import openpyxl

# --- Configuration ---
INPUT_FILE_DEFAULT = "pf_pontuacao.xlsx"
INPUT_FILE = os.environ.get("COMMISSION_INPUT_FILE", INPUT_FILE_DEFAULT)
INPUT_SHEET_SOHO = "soho"
INPUT_SHEET_INDICACAO = "indicacao"
INPUT_SHEET_AUSENCIAS = "ausencias"

try:
    if os.path.exists(INPUT_FILE):
        xls = pd.ExcelFile(INPUT_FILE)
        if INPUT_SHEET_SOHO not in xls.sheet_names:
            print(f"Error: Required sheet '{INPUT_SHEET_SOHO}' not found. Defaulting to first sheet.", file=sys.stderr)
            INPUT_SHEET_SOHO = xls.sheet_names[0]
        print(f"Using sheet for Soho: '{INPUT_SHEET_SOHO}'", file=sys.stderr)
        xls.close()
    else:
        print(f"Error: Input file {INPUT_FILE} not found. Please provide the correct file path.", file=sys.stderr)
        INPUT_SHEET_SOHO = "soho"
except Exception as e:
    print(f"Error reading sheets from {INPUT_FILE}: {e}. Defaulting to 'soho'.", file=sys.stderr)
    INPUT_SHEET_SOHO = "soho"

OUTPUT_FILE = "Premiação PF Consolidado.xlsx"

COL_COORD = "coordenador"
COL_SUPER = "supervisor"
COL_CONS = "consultor"
COL_CLIENTE = "CLIENTE"
COL_REGRA = "REGRA DE CÁLCUL"
COL_DATA = "DATA "
COL_BAIXA = "BAIXA"
COL_PROD = "PRODUTO"
COL_PONTOS = "pontos"
COL_TIPO_VENDA = "Tipo Venda"
COL_INDICACAO_TIPO = "tipo"
COL_AUSENCIAS = "ausencias"
COL_ADVERTENCIAS = "advertencias"

SALES_COLS_OUTPUT_ORDER = [
    "coordenador", "supervisor", "consultor", "CLIENTE", "REGRA DE CÁLCUL",
    "DATA ", "BAIXA", "PRODUTO", "Pontos Brutos", "Multiplicador",
    "Pontos Finais", "UGR Ativas", "UGR Desconexão", "BL Ativas",
    "BL Cancelada", "BL Desconectada", "Ind Movel"
]

def get_multiplier(regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0.0
    if 'desc re-alta' in regra_str: return -2.0
    elif "ativo" == regra_str: return 1.0
    elif "ativa base" in regra_str: return 0.5
    elif ("desconexão" in regra_str or "desc suspensão" in regra_str): return -1.0
    elif "cancelamento" in regra_str: return 0.0
    return 0.0

def calcular_ugr_ativa_venda(regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0
    return 1 if "ativo" == regra_str else 0

def calcular_ugr_desconexão_venda(regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0
    return 1 if ("desconexão" in regra_str or "desc suspensão" in regra_str or 'desc re-alta' in regra_str) else 0

def calcular_bl_ativa_venda(produto, regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0
    return 1 if pd.notna(produto) and "mb" in str(produto).lower() and "cancelamento" not in regra_str and "desconexão" not in regra_str and "desc suspensão" not in regra_str and "desc re-alta" not in regra_str else 0

def calcular_bl_cancelada_venda(produto, regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0
    return 1 if pd.notna(produto) and "mb" in str(produto).lower() and "cancelamento" in regra_str else 0

def calcular_bl_desconectada_venda(produto, regra):
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0
    return 1 if pd.notna(produto) and "mb" in str(produto).lower() and ("desconexão" in regra_str or "desc suspensão" in regra_str or 'desc re-alta' in regra_str) else 0

def calcular_ind_movel_venda_soho(tipo_venda, regra):
    tipo_venda_str = str(tipo_venda).strip().lower()
    regra_str = str(regra).strip().lower()
    if regra_str.startswith("indicacao"): return 0.0
    if pd.notna(tipo_venda) and ("indicação movel" in tipo_venda_str or "ind7351icação movel" in tipo_venda_str):
        if "ativo" == regra_str: return 5.0
        if ("desconexão" in regra_str or "desc suspensão" in regra_str or 'desc re-alta' in regra_str): return -5.0
    return 0.0

def calcular_ind_movel_venda_indicacao(tipo):
    tipo_str = str(tipo).strip().lower()
    if "ativo" == tipo_str: return 5.0
    if "desconexão" == tipo_str: return -5.0
    return 0.0

def calcular_penalidade_advertencias(advertencias):
    try:
        advertencias = int(advertencias)
        if advertencias == 1:
            return 0
        elif advertencias == 2:
            return 120
        elif advertencias >= 3:
            return 200
        else:
            return 0
    except (ValueError, TypeError):
        return 0

header_font = Font(bold=True, color="FFFFFF")
header_fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")
calc_block_font = Font(bold=True)
currency_format = '"R$"#,##0.00;"R$"-#,##0.00;"R$"0.00'
percent_format = '0.00%'
number_format = '#,##0'
int_number_format = '0'
multiplier_format = '0.0;[Red]-0.0;0.0'
thin_border = Border(left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin"))
center_align = Alignment(horizontal="center", vertical="center")

def write_calc_line(ws_func, row_func, col_offset, refs_func, label, value_formula, format_str=None, is_label_bold=True):
    label_cell = ws_func.cell(row=row_func, column=col_offset + 1, value=label)
    if is_label_bold:
        label_cell.font = calc_block_font
    label_cell.border = thin_border
    value_cell = ws_func.cell(row=row_func, column=col_offset + 2)
    value_cell.border = thin_border
    if format_str:
        value_cell.number_format = format_str

    if isinstance(value_formula, str):
        value_formula = value_formula.strip()
        if not value_formula.startswith('=') and value_formula:
            value_formula = f"={value_formula}"
        value_cell.value = value_formula
    elif value_formula is None:
        value_cell.value = None
    else:
        try:
            numeric_value = pd.to_numeric(value_formula)
            if pd.isna(numeric_value):
                value_cell.value = value_formula
            else:
                value_cell.value = numeric_value
        except (ValueError, TypeError):
            value_cell.value = value_formula

    refs_func[label] = value_cell.coordinate
    return row_func + 1

all_consultant_summary = []

try:
    print(f"Reading input file: {INPUT_FILE}")
    if not os.path.exists(INPUT_FILE):
        raise FileNotFoundError(f"Input file '{INPUT_FILE}' not found. Please ensure 'pf_pontuacao.xlsx' is in the same directory as this script or provide the correct path.")

    xls = pd.ExcelFile(INPUT_FILE)
    print(f"Reading sheet: '{INPUT_SHEET_SOHO}'")
    df_soho = pd.read_excel(xls, sheet_name=INPUT_SHEET_SOHO)
    print(f"Sheet '{INPUT_SHEET_SOHO}' read successfully.")

    df_indicacao = pd.DataFrame()
    if INPUT_SHEET_INDICACAO in xls.sheet_names:
        print(f"Reading sheet: '{INPUT_SHEET_INDICACAO}'")
        df_indicacao = pd.read_excel(xls, sheet_name=INPUT_SHEET_INDICACAO)
        print(f"Sheet '{INPUT_SHEET_INDICACAO}' read successfully.")
    else:
        print(f"Warning: Sheet '{INPUT_SHEET_INDICACAO}' not found. Skipping indication processing.", file=sys.stderr)

    df_ausencias = pd.DataFrame()
    if INPUT_SHEET_AUSENCIAS in xls.sheet_names:
        print(f"Reading sheet: '{INPUT_SHEET_AUSENCIAS}'")
        df_ausencias = pd.read_excel(xls, sheet_name=INPUT_SHEET_AUSENCIAS)
        print(f"Sheet '{INPUT_SHEET_AUSENCIAS}' read successfully.")
    else:
        print(f"Warning: Sheet '{INPUT_SHEET_AUSENCIAS}' not found. 'Status Ausencia' and 'Penalidade ABS' will be set to 0.", file=sys.stderr)

    xls.close()

    ausencias_dict = {}
    advertencias_dict = {}
    if not df_ausencias.empty:
        required_ausencias_cols = [COL_CONS, COL_AUSENCIAS]
        missing_ausencias_cols = [col for col in required_ausencias_cols if col not in df_ausencias.columns]
        if missing_ausencias_cols:
            print(f"Warning: Missing columns in '{INPUT_SHEET_AUSENCIAS}': {', '.join(missing_ausencias_cols)}. 'Status Ausencia' will be set to 0.", file=sys.stderr)
        else:
            df_ausencias[COL_AUSENCIAS] = pd.to_numeric(df_ausencias[COL_AUSENCIAS], errors="coerce").fillna(0).astype(int)
            ausencias_dict = dict(zip(df_ausencias[COL_CONS], df_ausencias[COL_AUSENCIAS]))
            print("Ausências mapeadas para consultores.")

        if COL_ADVERTENCIAS in df_ausencias.columns:
            df_ausencias[COL_ADVERTENCIAS] = pd.to_numeric(df_ausencias[COL_ADVERTENCIAS], errors="coerce").fillna(0).astype(int)
            advertencias_dict = dict(zip(df_ausencias[COL_CONS], df_ausencias[COL_ADVERTENCIAS]))
            print(f"Advertências mapeadas: {advertencias_dict}")
        else:
            print(f"Warning: Column '{COL_ADVERTENCIAS}' not found in '{INPUT_SHEET_AUSENCIAS}'. 'Penalidade ABS' will be set to 0.", file=sys.stderr)
            advertencias_dict = {cons: 0 for cons in df_soho[COL_CONS].unique()}

    print("Processing Soho data...")
    required_soho_cols = [COL_COORD, COL_SUPER, COL_CONS, COL_CLIENTE, COL_REGRA, COL_DATA, COL_PROD, COL_PONTOS]
    missing_soho_cols = [col for col in required_soho_cols if col not in df_soho.columns]
    if missing_soho_cols:
        raise ValueError(f"Missing columns in '{INPUT_SHEET_SOHO}': {', '.join(missing_soho_cols)}")

    df_soho[COL_BAIXA] = df_soho.get(COL_BAIXA, pd.NaT)
    if COL_TIPO_VENDA not in df_soho.columns:
        print(f"Warning: Column '{COL_TIPO_VENDA}' not found in Soho. Ind Movel (Soho part) will be zero.", file=sys.stderr)
        df_soho[COL_TIPO_VENDA] = ""

    df_soho[COL_PONTOS] = pd.to_numeric(df_soho[COL_PONTOS], errors="coerce").fillna(0)
    df_soho[COL_DATA] = pd.to_datetime(df_soho[COL_DATA], format='%d/%m/%Y', errors='coerce')
    df_soho[COL_BAIXA] = pd.to_datetime(df_soho[COL_BAIXA], format='%d/%m/%Y', errors='coerce')

    df_soho["Pontos Brutos"] = df_soho[COL_PONTOS]
    df_soho["Multiplicador"] = df_soho[COL_REGRA].apply(get_multiplier)
    df_soho["Pontos Finais"] = df_soho["Pontos Brutos"] * df_soho["Multiplicador"]
    df_soho["UGR Ativas"] = df_soho[COL_REGRA].apply(calcular_ugr_ativa_venda)
    df_soho["UGR Desconexão"] = df_soho[COL_REGRA].apply(calcular_ugr_desconexão_venda)
    df_soho["BL Ativas"] = df_soho.apply(lambda row: calcular_bl_ativa_venda(row[COL_PROD], row[COL_REGRA]), axis=1)
    df_soho["BL Cancelada"] = df_soho.apply(lambda row: calcular_bl_cancelada_venda(row[COL_PROD], row[COL_REGRA]), axis=1)
    df_soho["BL Desconectada"] = df_soho.apply(lambda row: calcular_bl_desconectada_venda(row[COL_PROD], row[COL_REGRA]), axis=1)
    df_soho["Ind Movel"] = df_soho.apply(lambda row: calcular_ind_movel_venda_soho(row.get(COL_TIPO_VENDA, ""), row[COL_REGRA]), axis=1)
    print("Soho per-sale metrics calculated.")

    df_indicacao_processed = pd.DataFrame()
    if not df_indicacao.empty:
        print("Processing Indicacao data...")
        required_indicacao_cols = [COL_COORD, COL_SUPER, COL_CONS, "cnpj", COL_INDICACAO_TIPO, "data"]
        missing_indicacao_cols = [col for col in required_indicacao_cols if col not in df_indicacao.columns]
        if missing_indicacao_cols:
            if not all(c in [COL_COORD, COL_SUPER, COL_CONS, COL_INDICACAO_TIPO] for c in missing_indicacao_cols):
                raise ValueError(f"Missing critical columns in '{INPUT_SHEET_INDICACAO}': {', '.join(missing_indicacao_cols)}")
            else:
                print(f"Warning: Missing non-critical columns in '{INPUT_SHEET_INDICACAO}': {', '.join(missing_indicacao_cols)}. Filling with defaults.", file=sys.stderr)
                for col in missing_indicacao_cols:
                    if col == 'cnpj': df_indicacao['cnpj'] = 'N/A'
                    if col == 'data': df_indicacao['data'] = pd.Timestamp('today')

        df_indicacao_processed = df_indicacao[[c for c in required_indicacao_cols if c in df_indicacao.columns]].copy()
        df_indicacao_processed.rename(columns={
            "cnpj": COL_CLIENTE,
            "data": COL_DATA,
            COL_INDICACAO_TIPO: COL_REGRA
        }, inplace=True)

        original_tipo_col = df_indicacao[COL_INDICACAO_TIPO]
        df_indicacao_processed[COL_REGRA] = "Indicacao " + df_indicacao_processed[COL_REGRA].astype(str)
        df_indicacao_processed[COL_DATA] = pd.to_datetime(df_indicacao_processed[COL_DATA], format='%d/%m/%Y', errors='coerce')
        df_indicacao_processed[COL_BAIXA] = pd.NaT
        df_indicacao_processed[COL_PROD] = "Indicacao"
        df_indicacao_processed[COL_PONTOS] = 0
        df_indicacao_processed[COL_TIPO_VENDA] = ""
        df_indicacao_processed["Pontos Brutos"] = 0
        df_indicacao_processed["Multiplicador"] = 0.0
        df_indicacao_processed["Pontos Finais"] = 0
        df_indicacao_processed["UGR Ativas"] = 0
        df_indicacao_processed["UGR Desconexão"] = 0
        df_indicacao_processed["BL Ativas"] = 0
        df_indicacao_processed["BL Cancelada"] = 0
        df_indicacao_processed["BL Desconectada"] = 0
        df_indicacao_processed["Ind Movel"] = original_tipo_col.apply(calcular_ind_movel_venda_indicacao)
        print("Indicacao data processed.")

    print("Combining Soho and Indicacao data...")
    all_cols = list(set(df_soho.columns) | set(df_indicacao_processed.columns))
    df_soho = df_soho.reindex(columns=all_cols)
    if not df_indicacao_processed.empty:
        df_indicacao_processed = df_indicacao_processed.reindex(columns=all_cols)
        df_combined = pd.concat([df_soho, df_indicacao_processed], ignore_index=True)
    else:
        df_combined = df_soho

    df_combined[COL_COORD] = df_combined[COL_COORD].fillna("NÃO ENCONTRADO")
    df_combined[COL_SUPER] = df_combined[COL_SUPER].fillna("NÃO ENCONTRADO")
    df_combined[COL_CONS] = df_combined[COL_CONS].fillna("NÃO ENCONTRADO")
    print("Data combined.")

    wb = Workbook()
    wb.remove(wb.active)

    print("Processing data for individual sheets...")
    grouped_coord = df_combined.groupby(COL_COORD)

    for coord_name, coord_group in grouped_coord:
        safe_coord_name = str(coord_name).replace(":", "-").replace("\\", "-").replace("/", "-").replace("?", "").replace("*", "").replace("[", "").replace("]", "")[:31]
        print(f"  Creating sheet: {safe_coord_name}")
        ws = wb.create_sheet(title=safe_coord_name)
        current_row = 1

        supervisors = coord_group[COL_SUPER].unique()
        supervisors_sorted = sorted(supervisors, key=lambda x: str(x).lower())

        for superv_name in supervisors_sorted:
            print(f"    Processing supervisor: {superv_name}")
            super_group = coord_group[coord_group[COL_SUPER] == superv_name]
            consultants = super_group[COL_CONS].unique()
            consultants_sorted = sorted(consultants, key=lambda x: str(x).lower())

            for consul_name in consultants_sorted:
                print(f"      Processing consultant: {consul_name} (Supervisor: {superv_name})")
                sales_start_row = current_row
                group = super_group[super_group[COL_CONS] == consul_name].copy()
                group["is_indicacao"] = group[COL_REGRA].apply(lambda x: 1 if str(x).strip().lower().startswith("indicacao") else 0)
                group_sorted = group.sort_values(
                    by=["is_indicacao", COL_REGRA, COL_DATA],
                    na_position='last',
                    key=lambda col: col if col.name != COL_REGRA else col.str.lower()
                )

                for col_idx, col_name in enumerate(SALES_COLS_OUTPUT_ORDER, 1):
                    cell = ws.cell(row=current_row, column=col_idx, value=col_name)
                    cell.font = header_font
                    cell.fill = header_fill
                    cell.alignment = center_align
                current_row += 1

                sales_row_details = []
                if not group_sorted.empty:
                    for idx, sale_row in group_sorted.iterrows():
                        row_num = current_row
                        regra = sale_row[COL_REGRA]
                        pontos_brutos_val = float(sale_row.get("Pontos Brutos", 0))
                        base_multiplier_val = float(sale_row.get("Multiplicador", 0))
                        pontos_finais_val = float(sale_row.get("Pontos Finais", 0))
                        ugr_ativas_val = int(sale_row.get("UGR Ativas", 0))
                        ugr_desc_val = int(sale_row.get("UGR Desconexão", 0))
                        bl_ativas_val = int(sale_row.get("BL Ativas", 0))
                        bl_canc_val = int(sale_row.get("BL Cancelada", 0))
                        bl_desc_val = int(sale_row.get("BL Desconectada", 0))
                        ind_movel_val = float(sale_row.get("Ind Movel", 0))

                        details = {"row": row_num, "regra": regra, "base_mult": base_multiplier_val}

                        for col_idx, col_name in enumerate(SALES_COLS_OUTPUT_ORDER, 1):
                            col_letter = get_column_letter(col_idx)
                            cell = ws.cell(row=row_num, column=col_idx)
                            value = None

                            if col_name == "Pontos Brutos": value = pontos_brutos_val; cell.number_format = number_format
                            elif col_name == "Multiplicador":
                                value = base_multiplier_val
                                cell.number_format = multiplier_format
                                details["mult_cell"] = f"{col_letter}{row_num}"
                            elif col_name == "Pontos Finais":
                                value = f"=I{row_num}*J{row_num}"
                                cell.number_format = number_format
                                details["pts_final_cell"] = f"{col_letter}{row_num}"
                            elif col_name == "UGR Ativas": value = ugr_ativas_val; cell.number_format = int_number_format
                            elif col_name == "UGR Desconexão": value = ugr_desc_val; cell.number_format = int_number_format
                            elif col_name == "BL Ativas": value = bl_ativas_val; cell.number_format = int_number_format
                            elif col_name == "BL Cancelada": value = bl_canc_val; cell.number_format = int_number_format
                            elif col_name == "BL Desconectada": value = bl_desc_val; cell.number_format = int_number_format
                            elif col_name == "Ind Movel": value = ind_movel_val; cell.number_format = currency_format
                            else:
                                value = sale_row.get(col_name)
                                if pd.isna(value) and col_name in [COL_DATA, COL_BAIXA]:
                                    value = None
                                if col_name in [COL_DATA, COL_BAIXA] and value is not None:
                                    cell.number_format = "dd/mm/yyyy"
                                if isinstance(value, pd.Timestamp):
                                    value = value.to_pydatetime()

                            cell.value = value
                            cell.border = thin_border

                        sales_row_details.append(details)
                        current_row += 1

                sales_end_row = current_row - 1
                print(f"        Sales data written (Rows {sales_start_row + 1} to {sales_end_row})")

                calc_block_start_row = current_row + 1
                current_row = calc_block_start_row
                print(f"        Writing consultant calc block at row {calc_block_start_row}")

                cell_refs = {}
                calc_col_offset = 1

                has_sales_data = sales_end_row >= sales_start_row + 1
                sum_pontos_final_formula = f"=SUM(K{sales_start_row + 1}:K{sales_end_row})" if has_sales_data else 0
                sum_ugr_at_formula = f"=SUM(L{sales_start_row + 1}:L{sales_end_row})" if has_sales_data else 0
                sum_ugr_desc_formula = f"=SUM(M{sales_start_row + 1}:M{sales_end_row})" if has_sales_data else 0
                sum_bl_at_formula = f"=SUM(N{sales_start_row + 1}:N{sales_end_row})" if has_sales_data else 0
                sum_bl_canc_formula = f"=SUM(O{sales_start_row + 1}:O{sales_end_row})" if has_sales_data else 0
                sum_bl_desc_formula = f"=SUM(P{sales_start_row + 1}:P{sales_end_row})" if has_sales_data else 0
                sum_ind_movel_formula = f"=SUM(Q{sales_start_row + 1}:Q{sales_end_row})" if has_sales_data else 0

                bl_at_val = group["BL Ativas"].sum() if has_sales_data else 0
                bl_canc_val = group["BL Cancelada"].sum() if has_sales_data else 0
                perc_canc_val = bl_canc_val / (bl_at_val + bl_canc_val) if (bl_at_val + bl_canc_val) != 0 else 0

                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Pontos Finais", sum_pontos_final_formula, number_format)
                pts_final_ref = cell_refs["Pontos Finais"]
                faixa_formula = (
                    f"=IF({pts_final_ref}>11000,0.28,IF({pts_final_ref}>=10000,0.25,"
                    f"IF({pts_final_ref}>=9000,0.22,IF({pts_final_ref}>=8000,0.21,"
                    f"IF({pts_final_ref}>=7000,0.2,IF({pts_final_ref}>=6000,0.18,"
                    f"IF({pts_final_ref}>=5000,0.15,IF({pts_final_ref}>=4000,0.13,"
                    f"IF({pts_final_ref}>=3000,0.1,0.05)))))))))"
                )
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Faixa", faixa_formula, percent_format)
                faixa_ref = cell_refs["Faixa"]
                valor_formula = f"={pts_final_ref}*{faixa_ref}"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Valor", valor_formula, currency_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "UGR Ativas", sum_ugr_at_formula, int_number_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "UGR Desconexão", sum_ugr_desc_formula, int_number_format)
                ugr_at_ref = cell_refs["UGR Ativas"]
                ugr_desc_ref = cell_refs["UGR Desconexão"]
                ugr_valida_formula = f"={ugr_at_ref}-{ugr_desc_ref}"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "UGR Válida", ugr_valida_formula, int_number_format)
                perc_desc_ugr_formula = f"=IFERROR({ugr_desc_ref}/{ugr_at_ref},0)"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "% Desconexão", perc_desc_ugr_formula, percent_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "BL Ativas", sum_bl_at_formula, int_number_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "BL Cancelada", sum_bl_canc_formula, int_number_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "BL Desconectada", sum_bl_desc_formula, int_number_format)
                bl_at_ref = cell_refs["BL Ativas"]
                bl_canc_ref = cell_refs["BL Cancelada"]
                bl_desc_ref = cell_refs["BL Desconectada"]
                bl_valida_formula = f"={bl_at_ref}-{bl_desc_ref}"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "BL Válida", bl_valida_formula, int_number_format)
                perc_canc_bl_formula = f"=IFERROR({bl_canc_ref}/({bl_at_ref}+{bl_canc_ref}),0)"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "% Cancelamento", perc_canc_bl_formula, percent_format)
                perc_canc_ref = cell_refs["% Cancelamento"]
                valor_ref = cell_refs["Valor"]
                multa_formula = f"=IF({perc_canc_ref}>0.1,{perc_canc_ref}*{valor_ref},0)"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Multa", multa_formula, currency_format)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Status Atraso", None)
                status_atraso_ref = cell_refs["Status Atraso"]
                status_ausencia_value = ausencias_dict.get(consul_name, 0)
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Status Ausencia", status_ausencia_value, int_number_format)
                status_ausencia_ref = cell_refs["Status Ausencia"]
                # --- Número de Advertências (permanece igual) ---
                advertencias_value = advertencias_dict.get(consul_name, 0)
                current_row = write_calc_line(
                    ws,
                    current_row,
                    calc_col_offset,
                    cell_refs,
                    "Número de Advertências",
                    advertencias_value,
                    int_number_format
                )
                # capturamos a célula onde ficou o valor de "Número de Advertências"
                adv_ref = cell_refs["Número de Advertências"]

                # --- Penalidade ABS: agora com fórmula no Excel ---
                penalidade_formula = f"=IF({adv_ref}>=3,200,IF({adv_ref}>=2,120,0))"
                current_row = write_calc_line(
                    ws,
                    current_row,
                    calc_col_offset,
                    cell_refs,
                    "Penalidade ABS",
                    penalidade_formula,
                    currency_format
                )
                penal_abs_ref = cell_refs["Penalidade ABS"]


                # --- Cálculo do Bônus com Fórmula do premiacaopf.py ---
                print(f"        Calculando bônus para consultor: {consul_name}")
                print(f"        perc_canc_ref: {perc_canc_ref}, valor: {ws[perc_canc_ref].value if perc_canc_ref in cell_refs else 'N/A'}")
                print(f"        perc_desc_ref: {cell_refs.get('% Desconexão', 'N/A')}, valor: {ws[cell_refs['% Desconexão']].value if '% Desconexão' in cell_refs else 'N/A'}")
                print(f"        penal_abs_ref: {penal_abs_ref}, valor: {ws[penal_abs_ref].value if penal_abs_ref in cell_refs else 'N/A'}")
                print(f"        bl_valida_ref: {cell_refs.get('BL Válida', 'N/A')}, valor: {ws[cell_refs['BL Válida']].value if 'BL Válida' in cell_refs else 'N/A'}")
                print(f"        status_atraso_ref: {status_atraso_ref}, valor: {ws[status_atraso_ref].value if status_atraso_ref in cell_refs else 'N/A'}")

                # Definir a condição de elegibilidade (bônus é zerado se qualquer métrica exceder o limite)
                bonus_eligibility_cond = f"OR({perc_canc_ref}>0.1,{cell_refs['% Desconexão']}>0.1,)"
                # Definir os valores do bônus com base em BL Válida
                bonus_values_nested_if = (
                    f"IF({cell_refs['BL Válida']}>=60,1000,IF({cell_refs['BL Válida']}>=50,800,"
                    f"IF({cell_refs['BL Válida']}>=46,700,IF({cell_refs['BL Válida']}>=40,600,"
                    f"IF({cell_refs['BL Válida']}>=34,500,IF({cell_refs['BL Válida']}>=30,400,"
                    f"IF({cell_refs['BL Válida']}>=25,250,IF({cell_refs['BL Válida']}>=20,200,0))))))))"
                )
                # Calcular o bônus, zerando se as condições de elegibilidade não forem atendidas
                original_bonus_calc = f"IF({bonus_eligibility_cond},0,{bonus_values_nested_if})"
                # Aplicar a verificação de Status Atraso
                final_bonus_formula = f"=IF(OR(ISBLANK({status_atraso_ref}),{status_atraso_ref}<1),{original_bonus_calc},0)"
                print(f"        Fórmula do bônus: {final_bonus_formula}")

                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Bônus", final_bonus_formula, currency_format)
                # --- Fim do Cálculo do Bônus ---

                bonus_ref = cell_refs["Bônus"]
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Ind Movel", sum_ind_movel_formula, currency_format)
                ind_movel_ref = cell_refs["Ind Movel"]
                multa_ref = cell_refs["Multa"]
                total_geral_formula = f"=MAX(0,{valor_ref}+{bonus_ref}+{ind_movel_ref}-{multa_ref}-{penal_abs_ref})"
                current_row = write_calc_line(ws, current_row, calc_col_offset, cell_refs, "Total Geral", total_geral_formula, currency_format)

                consultant_summary = {
                    "coordenador": coord_name,
                    "supervisor": superv_name,
                    "consultor": consul_name,
                    "pontos_finais_ref": pts_final_ref,
                    "ugr_valida_ref": cell_refs["UGR Válida"],
                    "bl_valida_ref": cell_refs["BL Válida"],
                    "bonus_ref": bonus_ref,
                    "total_geral_ref": cell_refs["Total Geral"],
                    "bl_desc_ref": cell_refs["BL Desconectada"],
                    "bl_canc_ref": cell_refs["BL Cancelada"],
                    "ind_movel_ref": cell_refs["Ind Movel"],
                    "perc_canc_val": perc_canc_val,
                    "perc_canc_ref": cell_refs["% Cancelamento"],
                }
                all_consultant_summary.append(consultant_summary)

                if status_ausencia_ref:
                    try:
                        coord_tuple = openpyxl.utils.coordinate_to_tuple(status_ausencia_ref)
                        status_ausencia_cell_abs_ref = f"${openpyxl.utils.get_column_letter(coord_tuple[1])}${coord_tuple[0]}"
                        print(f"        Updating Multiplier based on Status Ausencia: {status_ausencia_cell_abs_ref}")
                        for details in sales_row_details:
                            row_num = details['row']
                            regra = details['regra']
                            mult_cell_coord = details['mult_cell']
                            base_multiplier = details['base_mult']
                            regra_str_lower = str(regra).strip().lower()
                            if regra_str_lower.startswith("indicacao"):
                                continue
                            is_desconexao = "desconexão" in regra_str_lower or "desc suspensão" in regra_str_lower
                            mult_formula = f"=IF(IF(ISBLANK({status_ausencia_cell_abs_ref}),0,{status_ausencia_cell_abs_ref})>=1,-2.0,{base_multiplier})" if is_desconexao else base_multiplier
                            ws[mult_cell_coord].value = mult_formula
                            ws[mult_cell_coord].number_format = multiplier_format
                    except ValueError as ve:
                        print(f"Warning: Could not parse Status Ausencia coordinate '{status_ausencia_ref}'. Multiplier not updated. Error: {ve}", file=sys.stderr)
                else:
                    print(f"Warning: Status Ausencia cell reference not found for consultant {consul_name}. Multiplier not updated.", file=sys.stderr)

                column_widths = {
                    "A": 20, "B": 20, "C": 25, "D": 30, "E": 18, "F": 12, "G": 12,
                    "H": 25, "I": 15, "J": 15, "K": 15, "L": 12, "M": 15, "N": 12,
                    "O": 15, "P": 15, "Q": 15
                }
                for col_letter, width in column_widths.items():
                    ws.column_dimensions[col_letter].width = width

                current_row += 2

        print(f"  Finished sheet: {safe_coord_name}")

    print("\nCreating Consolidated Sheet...")
    ws_consolidado = wb.create_sheet(title="CONSOLIDADO ")
    cons_row = 1

    df_summary = pd.DataFrame(all_consultant_summary)
    grouped_summary_coord = df_summary.groupby("coordenador")

    cons_col_offset = 0
    cons_headers = [
        "Coordenador", "Supervisor", "Consultor", "Pontos", "UGR", "BL", "Bônus",
        "A Receber", "BLs Desconectadas", "BLs Canceladas", "Ind. Móvel"
    ]

    for coord_name_sum, coord_group_sum in grouped_summary_coord:
        supervisors_summary = coord_group_sum["supervisor"].unique()
        supervisors_summary_sorted = sorted(supervisors_summary, key=lambda x: str(x).lower())
        for super_name_sum in supervisors_summary_sorted:
            super_group_sum = coord_group_sum[coord_group_sum["supervisor"] == super_name_sum]
            print(f"  Processing consolidated data for Supervisor: {super_name_sum} (Coord: {coord_name_sum})")
            for c_idx, header in enumerate(cons_headers, 1):
                cell = ws_consolidado.cell(row=cons_row, column=c_idx)
                cell.value = header
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = center_align
                cell.border = thin_border
            cons_row += 1

            supervisor_start_row = cons_row
            consultant_refs_list = []

            super_group_sum = super_group_sum.sort_values("consultor", key=lambda x: x.str.lower())

            for idx_sum, cons_data in super_group_sum.iterrows():
                ws_consolidado.cell(row=cons_row, column=1, value=cons_data["coordenador"]).border = thin_border
                ws_consolidado.cell(row=cons_row, column=2, value=cons_data["supervisor"]).border = thin_border
                ws_consolidado.cell(row=cons_row, column=3, value=cons_data["consultor"]).border = thin_border

                safe_coord_name_ref = str(cons_data["coordenador"]).replace(":", "-").replace("\\", "-").replace("/", "-").replace("?", "").replace("*", "").replace("[", "").replace("]", "")[:31]
                sheet_ref_prefix = f"'{safe_coord_name_ref}'!"

                ref_map = {
                    "Pontos": cons_data["pontos_finais_ref"],
                    "UGR": cons_data["ugr_valida_ref"],
                    "BL": cons_data["bl_valida_ref"],
                    "Bônus": cons_data["bonus_ref"],
                    "A Receber": cons_data["total_geral_ref"],
                    "BLs Desconectadas": cons_data["bl_desc_ref"],
                    "BLs Canceladas": cons_data["bl_canc_ref"],
                    "Ind. Móvel": cons_data["ind_movel_ref"],
                }

                current_cons_refs = {}
                for h_idx, header in enumerate(cons_headers):
                    if header in ref_map:
                        col_num = h_idx + 1
                        cell = ws_consolidado.cell(row=cons_row, column=col_num)
                        formula = f"={sheet_ref_prefix}{ref_map[header]}"
                        cell.value = formula
                        cell.border = thin_border
                        if header == "Pontos": cell.number_format = number_format
                        elif header in ["UGR", "BL", "BLs Desconectadas", "BLs Canceladas"]: cell.number_format = int_number_format
                        elif header in ["Bônus", "A Receber", "Ind. Móvel"]: cell.number_format = currency_format
                        current_cons_refs[header] = cell.coordinate

                consultant_refs_list.append(current_cons_refs)
                cons_row += 1

            supervisor_end_row = cons_row - 1

            if supervisor_start_row <= supervisor_end_row:
                print(f"    Writing supervisor calc block for {super_name_sum}")
                cons_row += 1
                supervisor_calc_start_row = cons_row
                sup_cell_refs = {}

                pontos_range = f"D{supervisor_start_row}:D{supervisor_end_row}"
                ugr_range = f"E{supervisor_start_row}:E{supervisor_end_row}"
                bl_range = f"F{supervisor_start_row}:F{supervisor_end_row}"
                bonus_cons_range = f"G{supervisor_start_row}:G{supervisor_end_row}"
                a_receber_range = f"H{supervisor_start_row}:H{supervisor_end_row}"
                bl_desc_range = f"I{supervisor_start_row}:I{supervisor_end_row}"
                bl_canc_range = f"J{supervisor_start_row}:J{supervisor_end_row}"
                ind_movel_range = f"K{supervisor_start_row}:K{supervisor_end_row}"

                consHIPS_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total Pontos", f"=SUM({pontos_range})", number_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total UGR", f"=SUM({ugr_range})", int_number_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total BL", f"=SUM({bl_range})", int_number_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total Bônus Consultor", f"=SUM({bonus_cons_range})", currency_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total A Receber Consultor", f"=SUM({a_receber_range})", currency_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total BLs Desconectadas", f"=SUM({bl_desc_range})", int_number_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total BLs Canceladas", f"=SUM({bl_canc_range})", int_number_format)
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total Ind. Móvel", f"=SUM({ind_movel_range})", currency_format)

                total_a_receber_sup_ref = sup_cell_refs["Total A Receber Consultor"]
                sup_comissao_formula = f"={total_a_receber_sup_ref}*0.02"
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Comissão Supervisor", sup_comissao_formula, currency_format)
                sup_comissao_ref = sup_cell_refs["Comissão Supervisor"]

                sup_total_geral_formula = f"={total_a_receber_sup_ref}+{sup_comissao_ref}"
                cons_row = write_calc_line(ws_consolidado, cons_row, cons_col_offset + 2, sup_cell_refs, "Total Geral Equipe", sup_total_geral_formula, currency_format)
                sup_total_geral_ref = sup_cell_refs["Total Geral Equipe"]

                super_group_sum_dict = super_group_sum.to_dict('records')
                for record in super_group_sum_dict:
                    record["total_geral_equipe_ref"] = sup_total_geral_ref

                cons_row += 2

    print("\nCreating Summary Table for Coordinators...")
    cons_row += 2

    summary_headers = [
        "Coordenador", "Total", "Média", "Pontos", "UGR", "BL", "Bônus",
        "A Receber", "% Cancelamento", "BLs Desconectadas", "BLs Canceladas", "Ind. Móvel", "Comissão Coordenador", "Total Final"
    ]

    for c_idx, header in enumerate(summary_headers, 1):
        cell = ws_consolidado.cell(row=cons_row, column=c_idx)
        cell.value = header
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = center_align
        cell.border = thin_border
    cons_row += 1

    for coord_name_sum, coord_group_sum in grouped_summary_coord:
        summary_start_row = cons_row

        ws_consolidado.cell(row=cons_row, column=1, value=coord_name_sum).border = thin_border
        ws_consolidado.cell(row=cons_row, column=2, value=len(coord_group_sum)).border = thin_border

        total_pontos = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",D2:D{cons_row-1})"
        total_ugr = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",E2:E{cons_row-1})"
        total_bl = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",F2:F{cons_row-1})"
        total_bonus = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",G2:G{cons_row-1})"
        total_a_receber = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",H2:H{cons_row-1})"
        total_bl_desc = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",I2:I{cons_row-1})"
        total_bl_canc = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",J2:J{cons_row-1})"
        total_ind_movel = f"=SUMIF(A2:A{cons_row-1},\"{coord_name_sum}\",K2:K{cons_row-1})"

        refs = {}
        refs["Total Pontos"] = ws_consolidado.cell(row=cons_row, column=4, value=total_pontos).coordinate
        ws_consolidado.cell(row=cons_row, column=4).number_format = number_format
        ws_consolidado.cell(row=cons_row, column=4).border = thin_border

        refs["Total UGR"] = ws_consolidado.cell(row=cons_row, column=5, value=total_ugr).coordinate
        ws_consolidado.cell(row=cons_row, column=5).number_format = int_number_format
        ws_consolidado.cell(row=cons_row, column=5).border = thin_border

        refs["Total BL"] = ws_consolidado.cell(row=cons_row, column=6, value=total_bl).coordinate
        ws_consolidado.cell(row=cons_row, column=6).number_format = int_number_format
        ws_consolidado.cell(row=cons_row, column=6).border = thin_border

        refs["Total Bônus"] = ws_consolidado.cell(row=cons_row, column=7, value=total_bonus).coordinate
        ws_consolidado.cell(row=cons_row, column=7).number_format = currency_format
        ws_consolidado.cell(row=cons_row, column=7).border = thin_border

        refs["Total A Receber"] = ws_consolidado.cell(row=cons_row, column=8, value=total_a_receber).coordinate
        ws_consolidado.cell(row=cons_row, column=8).number_format = currency_format
        ws_consolidado.cell(row=cons_row, column=8).border = thin_border

        avg_perc_canc = sum(row["perc_canc_val"] for _, row in coord_group_sum.iterrows()) / len(coord_group_sum) if len(coord_group_sum) > 0 else 0
        refs["Avg % Cancelamento"] = ws_consolidado.cell(row=cons_row, column=9, value=avg_perc_canc).coordinate
        ws_consolidado.cell(row=cons_row, column=9).number_format = percent_format
        ws_consolidado.cell(row=cons_row, column=9).border = thin_border

        refs["Total BLs Desconectadas"] = ws_consolidado.cell(row=cons_row, column=10, value=total_bl_desc).coordinate
        ws_consolidado.cell(row=cons_row, column=10).number_format = int_number_format
        ws_consolidado.cell(row=cons_row, column=10).border = thin_border

        refs["Total BLs Canceladas"] = ws_consolidado.cell(row=cons_row, column=11, value=total_bl_canc).coordinate
        ws_consolidado.cell(row=cons_row, column=11).number_format = int_number_format
        ws_consolidado.cell(row=cons_row, column=11).border = thin_border

        refs["Total Ind. Móvel"] = ws_consolidado.cell(row=cons_row, column=12, value=total_ind_movel).coordinate
        ws_consolidado.cell(row=cons_row, column=12).number_format = currency_format
        ws_consolidado.cell(row=cons_row, column=12).border = thin_border

        total_geral_equipe_refs = []
        for _, row in coord_group_sum.iterrows():
            try:
                total_geral_equipe_refs.append(row["total_geral_equipe_ref"])
            except KeyError:
                print(f"Warning: 'total_geral_equipe_ref' not found for coordinator {coord_name_sum}, supervisor {row['supervisor']}. Using 0.", file=sys.stderr)
                total_geral_equipe_refs.append("0")
        if total_geral_equipe_refs:
            total_geral_equipe_sum_formula = "+".join(total_geral_equipe_refs)
            comissao_coord_formula = f"=({total_geral_equipe_sum_formula})*0.01"
        else:
            comissao_coord_formula = "=0"
        refs["Comissão Coordenador"] = ws_consolidado.cell(row=cons_row, column=13, value=comissao_coord_formula).coordinate
        ws_consolidado.cell(row=cons_row, column=13).number_format = currency_format
        ws_consolidado.cell(row=cons_row, column=13).border = thin_border

        total_final_formula = f"={refs['Total A Receber']}+{refs['Comissão Coordenador']}+{refs['Total Ind. Móvel']}"
        ws_consolidado.cell(row=cons_row, column=14, value=total_final_formula).border = thin_border
        ws_consolidado.cell(row=cons_row, column=14).number_format = currency_format

        cons_row += 1

        ws_consolidado.cell(row=cons_row, column=1, value=coord_name_sum).border = thin_border
        ws_consolidado.cell(row=cons_row, column=2, value="Média").border = thin_border

        media_pontos = f"=AVERAGEIF(A2:A{cons_row-2},\"{coord_name_sum}\",D2:D{cons_row-2})"
        media_ugr = f"=AVERAGEIF(A2:A{cons_row-2},\"{coord_name_sum}\",E2:E{cons_row-2})"
        media_bl = f"=AVERAGEIF(A2:A{cons_row-2},\"{coord_name_sum}\",F2:F{cons_row-2})"

        ws_consolidado.cell(row=cons_row, column=4, value=media_pontos).border = thin_border
        ws_consolidado.cell(row=cons_row, column=4).number_format = number_format

        ws_consolidado.cell(row=cons_row, column=5, value=media_ugr).border = thin_border
        ws_consolidado.cell(row=cons_row, column=5).number_format = int_number_format

        ws_consolidado.cell(row=cons_row, column=6, value=media_bl).border = thin_border
        ws_consolidado.cell(row=cons_row, column=6).number_format = int_number_format

        cons_row += 1

        ws_consolidado.cell(row=cons_row, column=1, value=coord_name_sum).border = thin_border
        ws_consolidado.cell(row=cons_row, column=2, value="Faixa").border = thin_border

        total_pontos_ref = refs["Total Pontos"]
        faixa_formula = (
            f"=IF({total_pontos_ref}>11000,0.28,IF({total_pontos_ref}>=10000,0.25,"
            f"IF({total_pontos_ref}>=9000,0.22,IF({total_pontos_ref}>=8000,0.21,"
            f"IF({total_pontos_ref}>=7000,0.2,IF({total_pontos_ref}>=6000,0.18,"
            f"IF({total_pontos_ref}>=5000,0.15,IF({total_pontos_ref}>=4000,0.13,"
            f"IF({total_pontos_ref}>=3000,0.1,0.05)))))))))"
        )
        refs["Faixa"] = ws_consolidado.cell(row=cons_row, column=3, value=faixa_formula).coordinate
        ws_consolidado.cell(row=cons_row, column=3).number_format = percent_format
        ws_consolidado.cell(row=cons_row, column=3).border = thin_border

        cons_row += 1

        ws_consolidado.cell(row=cons_row, column=1, value=coord_name_sum).border = thin_border
        ws_consolidado.cell(row=cons_row, column=2, value="Bônus").border = thin_border

        bonus_formula = f"={refs['Total Pontos']}*{refs['Faixa']}"
        refs["Bônus Coord"] = ws_consolidado.cell(row=cons_row, column=7, value=bonus_formula).coordinate
        ws_consolidado.cell(row=cons_row, column=7).number_format = currency_format
        ws_consolidado.cell(row=cons_row, column=7).border = thin_border

        cons_row += 1

        ws_consolidado.cell(row=cons_row, column=1, value=coord_name_sum).border = thin_border
        ws_consolidado.cell(row=cons_row, column=2, value="TOTAL").border = thin_border

        cons_row += 2

    cons_column_widths = {
        "A": 20, "B": 20, "C": 25, "D": 15, "E": 10, "F": 10, "G": 15, "H": 15,
        "I": 18, "J": 18, "K": 15, "L": 15, "M": 15, "N": 15
    }
    for col_letter, width in cons_column_widths.items():
        ws_consolidado.column_dimensions[col_letter].width = width

    print("Consolidated sheet with summary created.")

    print(f"\nSaving final workbook: {OUTPUT_FILE}")
    output_dir = os.path.dirname(os.path.abspath(OUTPUT_FILE))
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    print(f"Attempting to save to: {os.path.abspath(OUTPUT_FILE)}")
    print(f"Directory exists: {os.path.exists(output_dir)}, Writable: {os.access(output_dir, os.W_OK)}")
    if os.path.exists(OUTPUT_FILE):
        print(f"File already exists at {OUTPUT_FILE}. Will attempt to overwrite.")

    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            wb.save(OUTPUT_FILE)
            print(f"Output file '{OUTPUT_FILE}' created successfully.")
            print("Reminder: Fill 'Status Atraso' manually in individual sheets if needed.")
            break
        except PermissionError as perm_error:
            if attempt < max_attempts - 1:
                print(f"Attempt {attempt + 1}/{max_attempts}: Permission denied while saving '{OUTPUT_FILE}'. Ensure the file is not open and you have write permissions.", file=sys.stderr)
                print("Please close the file if open, or press Ctrl+C to cancel. Retrying in 5 seconds...", file=sys.stderr)
                import time
                time.sleep(5)
            else:
                print(f"Error: Permission denied while saving '{OUTPUT_FILE}' after {max_attempts} attempts. Ensure the file is not open and you have write permissions.", file=sys.stderr)
                sys.exit(1)

except FileNotFoundError as fnf_error:
    print(f"Error: {fnf_error}", file=sys.stderr)
    sys.exit(1)
except ValueError as val_error:
    print(f"Error: {val_error}", file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred: {e}", file=sys.stderr)
    import traceback
    traceback.print_exc()
    sys.exit(1)
